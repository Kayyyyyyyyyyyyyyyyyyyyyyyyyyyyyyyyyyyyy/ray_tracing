#pragma kernel CSMain

RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
static const float PI = 3.14159265358979323846;


float2 _PixelOffset;

float4 _DirectionalLight;

//Variables for editor
int1 NumberOfReflections = 1;

float3 _GroundSpecular;
float3 _GroundAlbedo;


struct Ray
{
    float3 origin;
    float3 direction;
    float3 energy;
};

struct Sphere
{
    float3 position;
    float radius;
    float3 albedo;
    float3 specular;
};

StructuredBuffer<Sphere> _Spheres;

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    //Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f,0.0f,1.0f)).xyz;

    //Invert the perspective projection of the view space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    //Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return CreateRay(origin, direction);
}

struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
    float3 albedo;
    float3 specular;
};

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1. /0;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.albedo = float3(0.0f,0.0f,0.0f);
    hit.specular = float3(0.0f,0.0f,0.0f);
    return hit;
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
{
    //Calculate distance along the ray where the ground plane is intersected
    float t = -ray.origin.y / ray.direction.y;
    if(t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0.0f,1.0f,0.f);
        bestHit.albedo = _GroundAlbedo;
        bestHit.specular = _GroundSpecular;
    }
}

void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere)
{
    //Calculate distance along the ray where the sphere is intersected
    float3 distance = ray.origin - sphere.position;
    float point1 = -dot(ray.direction, distance);
    // p1^2 - sqrmag(d) + r^2
    float point2squared = point1 * point1 - dot(distance, distance) + sphere.radius * sphere.radius;
    if(point2squared < 0) return;
    float point2 = sqrt(point2squared);
    // if the distance from the ray origin to point 2 is greater than zero
    float t = point1 - point2 > 0 ? point1 - point2 : point1 + point2;
    //Checking we have a solution
    if(t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.position);
        bestHit.albedo = sphere.albedo;
        bestHit.specular = sphere.specular;
    }
}

RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();
    
    IntersectGroundPlane(ray, bestHit);

    //Trace spheres
    uint numSpheres, stride;
    _Spheres.GetDimensions(numSpheres, stride);
    for(uint i = 0; i < numSpheres; i++)
    {
        IntersectSphere(ray, bestHit, _Spheres[i]);
    }
    
    return bestHit;
}

float3 Shade(inout Ray ray, RayHit hit)
{
    if(hit.distance < 1./0)
    {
        //Reflect the ray and multiply the energy with the specular reflection
        ray.origin = hit.position + hit.normal * 0.001f;
        ray.direction = reflect(ray.direction, hit.normal);
        ray.energy *= hit.specular;

        bool shadow = false;
        Ray shadowRay = CreateRay(hit.position + hit.normal * 0.001f, -1 * _DirectionalLight.xyz);
        RayHit shadowHit = Trace(shadowRay);
        if(shadowHit.distance != 1./0)
        {
            return float3 (0.0f,0.0f,0.0f);
        }
        // return simple diffuse shading
        return saturate(dot(hit.normal, _DirectionalLight.xyz) * -1) * _DirectionalLight.w * hit.albedo;
    }
    else
    {
        ray.energy = 0.0f;
        
        //Sample the skybox and write it
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi,theta), 0).xyz;
    }
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    //Get the dimensions of RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);

    //Transform pixel to [-1,1] range
    float2 uv = float2 ((id.xy + _PixelOffset) /float2(width,height) * 2.0f - 1.0f);

    //Get a ray for the UVs
    Ray ray = CreateCameraRay(uv);

    float3 result = float3(0,0,0);
    for(int i = 0; i < NumberOfReflections; i++)
    {
        RayHit hit = Trace(ray);
        result += ray.energy * Shade(ray, hit);

        if(!any(ray.energy)) break;
    }
    
    Result[id.xy] = float4(result, 1);
}
